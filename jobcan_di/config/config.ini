; Description: 設定ファイル
; Note:
; - セクション名・キー名は大文字小文字を区別しません
; - 変数の上の行に連続したコメント行は、その変数のコメントとして扱われます。また、ファイルの冒頭のコメントはファイル全体のコメントとして扱われます。
; - 型ヒントは以下の3つに分類されます。変数定義の上の行に記述しますが、このうちtypeについては必ず記述してください。また、各記述の後には「;」を付けてください。
;   - type: データの型を示します。以下のいずれかを指定します
;     - bool: 真偽値 (0(->False)または1(->True))
;     - int: 整数
;     - float: 浮動小数点数
;     - string: 文字列
;   - range: データの範囲を示します。
;   - default: デフォルト値を示します。
; - rangeはデータの範囲または集合を示し、以下の6つに分類されます。ただし、typeがboolの場合は指定内容に関わらず{0, 1}が適用されます。
;   - (a, b): a < x < b
;   - [a, b]: a <= x <= b
;   - (a, b]: a < x <= b
;   - [a, b): a <= x < b
;   - {a, b}: x ∈ {a, b}
;   - 指定なし: 任意の値
; - rangeで無限大を指定する場合、inf、-infまたは記述なしにより表現します。以下に記述の例を示します。
;   - 0以上の値を表したい場合は、[0, ) または [0, inf)
;   - 0以下の値を表したい場合は、(, 0] または (-inf, 0]
;   - すべての値を表したい場合は、(-inf, inf) または (, )
; - default、rangeで文字列を指定する場合、""で囲む必要があります。
;   ''で囲んだ場合はエラーが発生します。
; - 「; #tags#」から開始する行にはタグを設定することが可能です。例えば、アイコンを設定する場合は「; #tags# icon="icon-name";」のように記述します。
;   - タグは「;」区切りで記述し、タグ名と値は「=」で区切ります。値が「"」で囲まれている場合は文字列として、それ以外の場合は数値として扱われます。
;   - 現在のバージョンでサポートされるタグは以下の通りです。
;     - icon: アイコン画像を指定します。アイコン画像は「resources/section」ディレクトリに存在する必要があります。
;       - 例: icon="icon-name"（resources/section/icon-name.png または resources/section/icon-name_dark.png / resources/section/icon-name_light.png）
;       - lightおよびdarkの画像が存在する場合、テーマに応じて自動的に切り替えることが可能です。
;       - 指定しない場合、"default_light"および"default_dark"が使用されます。
;     - display-name: セクションの表示名を指定します。指定しない場合、セクション名がそのまま表示されます。
;     - hidden: セクションを非表示にするかを指定します。非表示にする場合は1、非表示にしない場合は0を指定します。

; #tags# icon="api";
[API]
; APIのトークンの取得先（環境変数名）
; こちらに値が設定され、環境変数に値が設定されている場合、API_TOKENの設定は無視されます。
; type: string; default: "JOBCAN_API_TOKEN";
TOKEN_ENV_NAME=JOBCAN_API_TOKEN
; APIのトークン
; 上記に取得先の環境変数名が設定されていない（TOKEN_ENV_NAME=）場合、または環境変数に値が設定されていない場合に使用されます。
; type: string; default: "";
API_TOKEN=
; 1時間あたりのリクエスト回数上限（規定値）
; APIの仕様を参照してください（参考: https://ssl.wf.jobcan.jp/api_doc）。
; type: int; range: (0, 10000]; default: 5000;
REQUESTS_PER_HOUR=5000
; リクエストの間隔（秒）
; 数値が小さいほどデータの取得が速くなりますが、上記の上限を超えた場合にエラーが発生します。
; 0.0未満の値を指定した場合、REQUESTS_PER_HOURに基づいた秒数に置き換えられます（5000の場合3600/5000=0.72）
; type: float; range: (-inf, inf); default: 0.72;
REQUESTS_PER_SEC=0.72

; #tags# icon="download"; display-name="データ取得";
[DATA_RETRIEVAL]
; APIによるデータ取得時に生データをJSONとして保存するか
; 保存する場合は 1、保存しない場合は 0 を指定します
; type: bool; range: {0, 1}; default: 0;
SAVE_RAW_DATA=0
; JSONデータの保存先ディレクトリ
; {BASE_DIR} は main.py が存在するディレクトリを表す変数です。
; type: string; default: "{BASE_DIR}/raw_data";
RAW_DATA_DIR={BASE_DIR}/raw_data
; JSONファイルのインデント数
; -1を指定するとインデントを行いません
; type: int; range: [-1, 100]; default: 4;
JSON_INDENT=4
; JSONファイルのページ数のパディング数
; 例えば3であれば、1ページ目のファイル名には「p001」が付与されます
; type: int; range: [0, 100]; default: 3;
JSON_PADDING=3
; JSONファイルのエンコード方式
; type: string; default: "utf-8";
JSON_ENCODING=utf-8
; 取り消した申請書も取得するか
; 取得する場合は 1、取得しない場合は 0 を指定します
; type: bool; range: {0, 1}; default: 0;
INCLUDE_CANCELED_FORMS=1
; 基礎データ（ユーザ、グループ、役職）データの取得・保存エラーを無視するか
; 無視する場合は 1、無視しない場合は 0 を指定します
; NOTE: 無視した場合、発生したエラーは握りつぶされるため、DBに上記のデータが正常に保存されない可能性があります。
; #tags# removed=1
; type: bool; range: {0, 1}; default: 0;
IGNORE_BASIC_DATA_ERROR=0

; #tags# icon="database"; display-name="DB";
[DATABASE]
; 保存先のデータベースのパス
; {BASE_DIR} は main.py が存在するディレクトリを表す変数です。
; type: string; default: "{BASE_DIR}/jobcan-data.db";
DB_PATH={BASE_DIR}/jobcan-data.db
; 各申請書テーブルのID-名前対応表のパス
; {BASE_DIR} は main.py が存在するディレクトリを表す変数です。
; type: string; default: "{BASE_DIR}/settings/form_table_name.csv";
FORM_TABLE_NAME_PATH={BASE_DIR}/settings/form_table_name.csv
; 各申請書テーブルのID-名前対応表のエンコード方式
; type: string; default: "utf-8";
FORM_TABLE_NAME_ENCODING=utf-8
; 各申請書テーブルのID-名前対応表の区切り文字
; カンマ区切りの場合は「,」、タブ区切りの場合は「\t」を指定します。
; 上記以外の区切り文字を指定することも可能ですが、テーブル名やIDに含まれない文字を選択してください。
; type: string; default: ",";
FORM_TABLE_NAME_DELIMITER=,

; #tags# icon="edit_note"; display-name="ログ";
[LOGGING]
; ログの初期化をいつ行うか
; NEVER: ログは初期化されません
; ALWAYS_ON_STARTUP: 常に起動時にログを初期化します
; type: string; range: {"NEVER", "ALWAYS_ON_STARTUP"}; default: "ALWAYS_ON_STARTUP";
LOG_INIT=ALWAYS_ON_STARTUP
; ログファイルの保存先パス
; {BASE_DIR} は main.py が存在するディレクトリを表す変数です。
; 設定されたパスが不正な場合、ログは {BASE_DIR}/jobcan-retrieval.log に出力されます。
; type: string; default: "{BASE_DIR}/jobcan-retrieval.log";
LOG_PATH={BASE_DIR}/jobcan-retrieval.log
; ログファイルのエンコード方式
; type: string; default: "utf-8";
LOG_ENCODING=utf-8

; #tags# icon="announcement"; display-name="通知";
[NOTIFICATION]
; トースト通知を行うか
; 通知を行う場合は 1、行わない場合は 0 を指定します
; type: bool; range: {0, 1}; default: 0;
ENABLE_NOTIFICATION=0
; 起動時に全通知を削除するか
; 前回以前の通知を削除する場合は 1、削除しない場合は 0 を指定します
; type: bool; range: {0, 1}; default: 0;
CLEAR_PREVIOUS_NOTIFICATIONS_ON_STARTUP=1
; 一定レベル以上のログを通知するか
; エラー等が発生したことをわかりやすくするために使用します
; - WARNING: 警告以上のログを通知します
; - ERROR: エラー以上のログを通知します
; - NEVER: 通知しません
; type: string; range: {"NEVER", "WARNING", "ERROR"}; default: "ERROR";
NOTIFY_LOG_LEVEL=ERROR
; エラー発生時に進捗状況を消すか
; - True: エラー発生時に、進捗状況を表示するトーストのテキストをエラーメッセージに置き換えます
; - False: エラーが発生した場合、発生直前の進捗状況が表示されたままになります
; type: bool; range: {0, 1}; default: 0;
CLEAR_PROGRESS_ON_ERROR=0

; #tags# icon="terminal"; display-name="デバッグ"; hidden=1;
[DEBUGGING]
; ログ出力をコンソールにも行うか
; 行う場合は 1、行わない場合は 0 を指定します
; type: bool; range: {0, 1}; default: 0;
LOG_TO_CONSOLE=1
; .run() メソッドの実行時にエラーをcatchするか
; エラーをcatchする場合は 1 (本番用)、catchしない場合は 0 (デバッグ用)を指定します
; type: bool; range: {0, 1}; default: 0;
CATCH_ERRORS_ON_RUN=0
